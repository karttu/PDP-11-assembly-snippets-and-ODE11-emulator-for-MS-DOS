
    ODE11 is Octal Debugger and Emulator for analyzing and running
    the PDP11 machine language programs. Copyright (C) 1992-1994
    Antti Karttunen. (E-mail: karttu@mits.mdata.fi)
    (See also README.TXT)

Expressions.

  Expressions are of the form: [prefix-operators]octal_number/label
   that is, expression is octal number or symbolic label, preceded
   optionally by one or more prefix-operators.
  Note, there is two expressions which consist only of operators,
   they are . (dot) which keeps the location counter of the latest 
   instruction, and * (asterisk) which references to the contents
   of current location.
  Octal number must be in range of 0 - 177777, i.e. 16 bits.


Assembly time operators.

  There is currently only prefix-operators, called prefixes. They are:

 +          Plus. No effect on argument.
 -          Number is negated.
 ~          Number is complemented.
 <          Shift left (logical).
 >          Shift right (logical).
 [          Shift left (arithmetic), synonymous to <.
 ]          Shift right (arithmetic).
 .          Location Counter is added to number. Examples: .6  .+12  .-4  .
 !          LC+2 is subtracted from number. Useful with
             relative and relative deferred addressing (= modes 67 & 77).
 *          Word is fetched from location, i.e. indirection at assembly time
             Single * fetches from current location, i.e. keeps it intact.

Prefixes can be combined in arbitrary order. Examples:

 -~num      num incremented by one.
 <<<num     num multiplied by 8.
 ]]num      num divided by 4 (signed).
 -.-A       Same as A-.
 !.         Relative reference to the location of this instruction.
 **loc      Contents of contents of location loc is returned.
 
  There is also binary operator ,, which works like this:
    high_byte,,low_byte
  result is ((high_byte << 8) + low_byte). Currently both must be
  plain octal numbers, i.e. they cannot be labels nor expressions !
  And at least high_byte must be < 256. For example: 123,,123 produces 
  51523, and 1,,2 produces 402. If there is ,, and prefixes in the same
  expression, then ,, is computed first, and then prefixes are applied
  to the resulting word.

Special commands:

 ^B         Go one word backward, i.e. decrement location counter by 2.

 ^E         Execute MS-DOS command in shell (command.com). Jumps to shell
             if no argument. For example dir *.o11^E shows directory.

 ^G         Go. Start the execution from LC if no argument. If argument's
             first character is = then starts execution from that location.
	     E.g. =1000^G starts execution from 1000.
             If there is no = sign in the beginning, then that number
             is used as instruction count limit. E.g. 100^G starts
	     execution from LC, and executes 64 (= 100 in octal) instructions
             (at the most).

 ^H         Backspace, same as DEL. Deletes one character to left.

 ^I	    Input. Loads the code in from LC onward from the file whose
 	     name is given as argument. File contains code in same
	     format as it is entered manually in interactive mode.
	     If there was unresolved references in code they are shown
	     after loading. Example: test.o11^I  loads the file test.o11
	    However, if extension is .BIN, .OBJ, .SAV, .SYS or .TSK
	     then file is loaded in as raw binary image.

 ^J         Same as CR.

 ^K	    Set or show breakpoint. Without argument shows breakpoint,
            with argument sets it. If breakpoint is even then execution
            is stopped if/when PC gets exactly to that value. If breakpoint
            is odd, then execution is stopped if/when PC goes above that
            value.
              E.g. 1000^K stops execution when PC is 1000.
                    777^K stops execution when PC is above or equal to 1000.

 ^L         Set location counter. E.g. 1000^L sets LC to 1000.

 ^M         I.e. CR (also ^J). When in interactive mode, single CR
             with empty line unassembles the next instruction, and advances
             LC by two or more. When loading file, single CR is ignored.

 ^R         Show registers. Those registers changed since last shown are
             indicated by inversion.

 ^T         Trace. Execute one instruction from LC, show registers after
             its execution and advance LC to the next instruction.

 ^U         Unassemble. Unassembles code between mark (set with ^V) and
             current location counter. If argument is given, then code
	     is unassembled to that file instead of console.
	    E.g. codefile.ode^U

 ^V         Set mark. E.g. 2000^V sets mark to 2000 (octal). This is
             used with ^U and ^W commands.

 ^W         Write binary image. Writes everything between mark and
             current location counter out, into the file whose name
	     is given as argument.
	     E.g.
	     0^V (Set mark to be zero).
	     002000: newone.sav^W (Write stuff from 0 to 1776 inclusive
	     to the file named newone.sav).

 ^Y         Convert number. number^Y shows octal number given as argument
             in various formats (decimal, hex, binary, etc.)

 ^Z         Exit from ODE11.

 ^\         Show unresolved or matching labels. Without argument shows
             all labels which are still unresolved. With argument shows
	     those labels which match to that argument given. E.g.
	     PR*^\ shows all labels whose names begin with letters 'PR'.

 ^_         CLS/HOME. Without an argument clears screen, with any argument
             just homes the cursor.


Entering instructions

  Currently there is no full-fledged assembler in ODE11, so all
  instructions except branches and SOB must be entered as octal codes.

  If instruction doesn't contain addressing modes 27, 37, 67 or 77,
  that is, it is one-word instruction, then it is put to memory location
  where LC points, it is disassembled to symbolic form, which is shown
  at the same line and LC is advanced by two, and instruction in
  next location is shown.
    However, if instruction contains one or two of the above modes,
  i.e. it is two or three-word instruction, then those lacking
  words are requested on the same line. Corresponding LC is
  printed in bold font, and overwritten with argument when user
  has typed it. If user doesn't want to change second and possible third
  word (f.i. if entered number is data instead of code), then (s)he can
  enter an asterisk (*), which leaves the corresponding locations unchanged.

  Branches and SOB (Subtract One and Branch if not zero) can be entered
  symbolically. Format is:

    branch destination_address
    SOB register,destination_address

  where destination_address can be an octal address (like 001050),
  label (like LOOP) or some kind of relative expression like .-2
  Program automatically computes the displacement and of course checks
  that destination is in address range.

  Examples:

    BR 1010		Branches unconditionally to 1010

    BPL .-2             Branches to previous instruction (two words backward)
                         if there is no sign flag on in PSW.

    SOB R3,LOOP		Branches to label LOOP if R3 is not zero after
        		 it is decremented by one.

  Branches are:

    BR BNE BEQ BGE BLT BGT BLE BPL BMI BHI BLOS BVC BVS BCC BCS BHIS BLO


Labels

    Labels can be used in place of octal numbers. Labels can reference
    backward or forward. Label names are symbols beginning with letter,
    and after that containing letters and/or numbers. Underscore (_)
    is counted as letter too. Case is not significant, because all input
    is converted immediately to uppercase. There is currently no limit
    on the length of label name, but six or seven is recommended for
    the nice output.

  Label definition.

    Label can be defined in two ways. First is equate and it works as:
    =LABEL EXPR
    where LABEL is assigned to the value EXPR yields. EXPR can contain
    also label, if it has been already assigned value.

    Second way is:
    :LABEL
    or
    :LABEL instruction_code
    this assigns LABEL to the current LC.

    Examples:

    = CR 15	    This assigns label CR to value 15 (13 in decimal).
    :LETKU 010203   This puts instruction MOV R2,R3 to current location and
    		    assigns label LETKU to that location, i.e. LC.
    Same can be also accomplished with two lines of code:
    :LETKU
    010203


  Label reference.

    Label is referenced, i.e. used just by writing its name in the place
    of number, and then number assigned to label is used instead.
    I.e. 012737
         CR
         PRDATA
	 disassembles to
         MOV #000015,@#177566
	 i.e. instruction which outputs CR.

    However, if label is not defined yet, ("forward reference"), i.e.
    it is still unresolved, then if that label is used as argument
    for addressing modes 27, 37, 67 or 77, then -1 (= 177777) is returned
    as "filler-value" of label, prefixes are not evaluated yet, instead LC,
    ILC (= Instruction location counter, i.e. value of dot (.)),
    and prefixes are concatenated to plist of label.
    Finally when label is defined later in code, or in different module,
    that -1 is replaced by applying prefixes saved to plist to the
    value of label. If forward reference label is in branch or SOB,
    then LC+2 instead of -1 is returned first as "filler-value",
    and when branch or SOB is assembled with .+2 (i.e. next location)
    as destination that produces the base code of corresponding branch
    or SOB to that location. (displacement = 0). When label is later
    defined the difference between label and address of branch is used
    to compute the displacement which is added to base code of branch.

    Note that there is no distinction between "absolute labels" and
    "relocatable labels". All labels are "absolute" in sense that they
    are replaced by number they contain as value. However, if instruction
    contains addressing modes 67 or 77, i.e. relative or relative referred
    addressing, then corresponding labels or octal addresses should
    be preceded by an exclamation mark (!). For example instruction
    JMP SOMEWHERE  should be written as 000167 and !SOMEWHERE
    which produces a relative jump to SOMEWHERE. If that label is
    forward reference, and when it is finally defined then ! operator
    is applied to value SOMEWHERE then has, i.e. LC+2 is subtracted
    from that value, to produce the difference between JMP and SOMEWHERE.
    Of course that LC reference to that value location counter had when
    reference !SOMEWHERE was assembled.

  Linking with labels.

    Labels also facilitate the relocatable loading, i.e. linking of the
    different modules of code. Let's say there is call to subroutine
    SUBR1 in main routine, and that subroutine is in different module.
    So if first module contains JSR PC,@#SUBR1 (absolute addressing,
    written as 004737 and SUBR1) or JSR PC,SUBR1 (relative addressing,
    written as 004767 and !SUBR1), (note that both instructions work
    equally well), then after that module is loaded SUBR1 is listed
    as unresolved reference. Then user loads module containing routine
    SUBR1, for example with command SUBR1.O11^I and when label SUBR1
    is encountered those references to it are filled with correct
    values. Note that modules can be loaded almost anywhere into memory,
    as long as they don't overwrite each other or any important memory
    areas.

  Predefined labels.

    Following labels are predefined by ODE11:

    R0, R1, R2, R3, R4, R5, SP, PC
     These are assigned to those memory locations where registers are
     mapped in this PDP-11 emulator. (177700 - 177716)
     So for example R3^L can be used to look the value of R3 and change it.

    PSR and PSW refer to the Processor Status Register
     (or Processor Status Word) in location 177776 (= -2).

    CSR, KBSTAT, KBDATA, PRSTAT and PRDATA
     These refer to the Clock Status Register (not yet operational),
     and Keyboard and Printer status and data registers in I/O-page.

  Entering strings

    Ascii strings can also be entered directly to the memory of
  executor. Format is "string. Characters after doublequote
  are put to consecutive words, low byte first, then high byte.
  If there was odd number of characters in string, then one more
  zero (\0) is put into the end to make next address even.
  C-like backslash escape system is used in strings, like following:

   \b              backspace
   \e              escape   (= 033)
   \f              formfeed
   \n              newline, i.e. linefeed (= 012)
   \r              CR (= 015)
   \t              tab
   \ddd            where ddd is one to three octal digits after backslash.
   \anyother_char  produces anyother_char.
 
  Note that no ending-zero is automatically put into the end of string,
   if there's even number of characters, so you must explicitly put it,
   e.g: "abc\"def\\gh\r\n\0 produces string abc"def\gh plus CRLF plus
   ending zero.


  Deposit format.

    ODE11 can also input octal codes in deposit-format.
  Deposit-format is:  D addr=value1[,value2,...,valueN]
  where addr is new value of location counter where octal code
  value1 is stored, and if there is more values after that,
  they are stored into consecutive word locations, and LC is
  incremented accordingly.
  Deposit-files can be directly uploaded to the command interpreter
  of the RT-11, and they can be produced from .SAV-files with
  poro utility with -O option.
 
